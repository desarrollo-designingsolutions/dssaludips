networks:
  project_network:
    driver: bridge

services:
  php:
    build:
      context: .
      dockerfile: ./docker/dockerfiles/php.Dockerfile
    # container_name: ${COMPOSE_PROJECT_NAME}_php
    volumes:
      - ./backend:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini
    networks:
      - project_network
    # deploy:
    #   replicas: 5   # <-- Solo funciona con Docker Swarm

  vue:
    container_name: ${COMPOSE_PROJECT_NAME}_vue
    build:
      context: .
      dockerfile: docker/dockerfiles/vue3.dockerfile
    volumes:
      - ./frontend/src:/var/www/html/src
      - ./frontend/public:/var/www/html/public
    restart: always
    ports:
      - "${VUE_PORT}:5173"

  mysql:
    image: mysql:8.0.1
    restart: unless-stopped
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - project_network
    volumes:
      - ./docker/mysql_data:/var/lib/mysql

  redis_6379:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis_6379
    restart: unless-stopped
    ports:
      - "${REDIS_PORT_1}:6379"
    volumes:
      - ./docker/redis_data_6379:/data
    networks:
      - project_network

  redis_6380:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis_6380
    restart: unless-stopped
    ports:
      - "${REDIS_PORT_2}:6379"
    volumes:
      - ./docker/redis_data_6380:/data
    networks:
      - project_network

  server:
    image: nginx:1.28
    container_name: ${COMPOSE_PROJECT_NAME}_server
    restart: always
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - ./backend:/var/www/html
      - ./docker/nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./docker/nginx/certs:/etc/nginx/certs
    environment:
      - NGINX_SERVER_NAME=${NGINX_SERVER_NAME}
      - NGINX_HTTPS_PORT=${HTTPS_PORT}
      - SSL_CERT_PATH=${SSL_CERT_PATH}
      - SSL_KEY_PATH=${SSL_KEY_PATH}
    depends_on:
      - php
      - mysql
    networks:
      - project_network

  supervisor_reverb:
    build:
      context: .
      dockerfile: ./docker/dockerfiles/supervisor.dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_supervisor_reverb
    volumes:
      - ./backend:/var/www/html
      - ./docker/supervisor/laravel-worker-reverb.conf:/etc/supervisor/conf.d/laravel-worker-reverb.conf
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini
    depends_on:
      - php
      - mysql
    networks:
      - project_network
    ports:
      - "8080:8080"   # expone Reverb
    environment:
      - REVERB_APP_ID=${REVERB_APP_ID}
      - REVERB_APP_KEY=${REVERB_APP_KEY}
      - REVERB_APP_SECRET=${REVERB_APP_SECRET}
      - REVERB_HOST=${REVERB_HOST}
      - REVERB_PORT=${REVERB_PORT}
      - REVERB_SCHEME=${REVERB_SCHEME}
      
  supervisor_queues:
    build:
      context: .
      dockerfile: ./docker/dockerfiles/supervisor.dockerfile
    volumes:
      - ./backend:/var/www/html
      - ./docker/supervisor/laravel-worker-queue.conf:/etc/supervisor/conf.d/laravel-worker-queue.conf
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini
    depends_on:
      - php
      - mysql
    networks:
      - project_network
    # deploy:
    #   replicas: 5   # <-- Solo funciona con Docker Swarm 